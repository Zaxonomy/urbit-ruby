require "urbit/ship"

describe Urbit::Channel do
  let(:ship) { Urbit::Ship.new }

  let(:channel) {
    ship.subscribe('graph-store', '/updates')
    ship.open_channels.last
  }

  after(:each) do
    channel.close if channel.open?
  end

  it "is initialized with a name" do
    expect(channel.name).to_not be_nil
    expect(channel.name).to eq('Channel-0')
  end

  it "has an autogenerated key" do
    expect(channel.key).to_not be_nil
  end

  it "has a key 16 chars long" do
    expect(channel.key.size).to eq(16)
  end

  it "can send a message once opened" do
    # Setting up a sub has already sent 2 messages, the subscribe and the ack.
    expect(channel.sent_messages.size).to eq(2)
    expect(channel.open?)
  end

  it "can be closed" do
    expect(channel.sent_messages.size).to eq(2)
    expect(channel.open?)
    expect(channel.close)
    expect(channel.open?).to be false
    expect(channel.sent_messages.size).to eq(3)   # Closing is itself a message
    expect(channel.sent_messages.last.id).to eq(3)
  end

  it "can be represented as a string" do
    expect(channel.to_s).to eq("a Channel (Open) on ~zod(name: 'Channel-0', key: '#{channel.key}')")
  end

end
