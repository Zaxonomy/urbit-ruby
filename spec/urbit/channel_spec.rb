require "urbit/ship"

describe Urbit::Channel do
  let(:ship) { Urbit::Ship.new }

  let(:channel) {
    ship.subscribe(app: 'graph-store', path: '/updates')
    ship.open_channels.last
  }

  after(:each) do
    channel.close if channel.open?
  end

  it "is initialized with a name" do
    expect(channel.name).to_not be_nil
    # This is channel 2, not 0 or 1, because initializing the ship now opens channels for the Groups and Metadata.
    expect(channel.name).to eq('Channel-2')
  end

  it "has an autogenerated key" do
    expect(channel.key).to_not be_nil
  end

  it "has a key 16 chars long" do
    expect(channel.key.size).to eq(16)
  end

  it "can send a message once opened" do
    expect(channel.sent_messages.size).to eq(1)
    expect(channel.open?)
  end

  it "can use subscribed? as a synonym for open? when context appropriate" do
    expect(channel.open?)
    expect(channel.subscribed?)
  end

  it "can be closed" do
    expect(channel.sent_messages.size).to eq(1)
    expect(channel.subscribed?)
    expect(channel.close)
    expect(channel.open?).to be false
    expect(channel.sent_messages.size).to eq(2)   # Closing is itself a message
    expect(channel.sent_messages.last.id).to eq(2)
  end

  it "can be represented as a string" do
    expect(channel.to_s).to eq("a Channel (Open) on ~zod(name: 'Channel-2', key: '#{channel.key}')")
  end

end
